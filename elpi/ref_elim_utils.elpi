shorten std.{map}.

% Checks if the input term contains a `sig` in its definition up to evaluation.
pred sigfull i:term.
pred sigfull_rec i:term.

sigfull_rec ({{ @sig _ _ }}).

sigfull_rec (fun _ T _) :-
  sigfull T.
sigfull_rec (fun _ T F) :-
  pi x\ decl x _ T => sigfull (F x).

sigfull_rec (let _ T _ _) :-
  sigfull T.
sigfull_rec (let _ _ B _) :-
  sigfull B.
sigfull_rec (let _ T _ F) :-
  pi x\ decl x _ T => sigfull (F x).

sigfull_rec (prod _ T _) :-
  sigfull T.
sigfull_rec (prod _ T F) :-
  pi x\ decl x _ T => sigfull (F x).

sigfull_rec (app L) :- std.exists L sigfull.

sigfull_rec (fix _ _ Ty _) :-
  sigfull Ty.
sigfull_rec (fix _ _ Ty F) :-
  pi x\ decl x _ Ty => sigfull (F x).

sigfull_rec (match T _ _) :-
  sigfull T.
sigfull_rec (match _ Rty _) :-
  sigfull Rty.
sigfull_rec (match _ _ B) :-
  std.exists B sigfull.

sigfull_rec (uvar _ L) :- std.exists L sigfull.

sigfull I :-
  coq.reduction.lazy.whd I Ir,
  sigfull_rec Ir.

% Expand all the necessary subterms of `i` in order to reveal any `sig`.
pred smart_sig_expand i:term o:term.
pred sig_expand i:term o:term.
pred sig_expand_rec i:term o:term.

smart_sig_expand I O :-
  sigfull I, !,
  sig_expand I O.
smart_sig_expand I I.

sig_expand I O :-
  coq.reduction.lazy.whd I Ir,
  sig_expand_rec Ir O.

% There probably is a more direct algorithm that simultaneously checks whether there is a `sig` inside the term and
% expands. Chantal's idea: as we traverse the tree, remember which constructors we went through and rebuild then when
% we find a `sig`. Another approach would be to understand how to use memoization
sig_expand_rec (global _ as C) C :- !.
sig_expand_rec (pglobal _ _ as C) C :- !.
sig_expand_rec (sort _ as C) C :- !.
sig_expand_rec (fun N T F) (fun N T1 F1) :- !,
  smart_sig_expand T T1, pi x\ decl x _ T => smart_sig_expand (F x) (F1 x).
sig_expand_rec (let N T B F) (let N T1 B1 F1) :- !,
  smart_sig_expand T T1, smart_sig_expand B B1, pi x\ decl x _ T => smart_sig_expand (F x) (F1 x).
sig_expand_rec (prod N T F) (prod N T1 F1) :- !,
  smart_sig_expand T T1, (pi x\ decl x _ T => smart_sig_expand (F x) (F1 x)).
sig_expand_rec (app L) (app L1) :-
  std.map L smart_sig_expand L1.
sig_expand_rec (fix N Rno Ty F) (fix N Rno Ty1 F1) :- !,
  smart_sig_expand Ty Ty1, pi x\ decl x _ Ty => smart_sig_expand (F x) (F1 x).
sig_expand_rec (match T Rty B) (match T1 Rty1 B1) :- !,
  smart_sig_expand T T1, smart_sig_expand Rty Rty1,
  std.map B smart_sig_expand B1.
sig_expand_rec (primitive _ as C) C :- !.
sig_expand_rec (uvar M L) W :- !,
 std.map L smart_sig_expand L1, coq.mk-app-uvar M L1 W.
% when used in CHR rules
sig_expand_rec (uvar X L) (uvar X L1) :-
    std.map L smart_sig_expand L1.

% Checks if the input term contains `sig`, `proj1_sig` or `exist` in its definition up to evaluation.
pred refinefull i:term.
pred refinefull_rec i:term.

refinefull_rec ({{ exist _ _ _ }}).
refinefull_rec ({{ @sig _ _ }}).
refinefull_rec ({{ @proj1_sig _ _ _ }}).

refinefull_rec (fun _ T _) :- refinefull_rec T, !.
refinefull_rec (fun _ T F) :-
  pi x\ decl x _ T =>
  refinefull_rec (F x), !.

refinefull_rec (let _ T _ _) :-
  refinefull T, !.
refinefull_rec (let _ _ B _) :-
  refinefull B, !.
refinefull_rec (let _ T _ F) :-
  pi x\ decl x _ T => refinefull (F x), !.

refinefull_rec (prod _ T _) :-
  refinefull T, !.
refinefull_rec (prod _ T F) :-
  pi x\ decl x _ T => refinefull (F x), !.

refinefull_rec (app L) :- !, std.exists L refinefull.

refinefull_rec (fix _ _ Ty _) :-
  refinefull Ty, !.
refinefull_rec (fix _ _ Ty F) :-
  pi x\ decl x _ Ty => refinefull (F x), !.

refinefull_rec (match T _ _) :- refinefull T, !.
refinefull_rec (match _ Rty _) :- refinefull Rty, !.
refinefull_rec (match _ _ B) :- !,
  std.exists B refinefull.

refinefull_rec (uvar _ L) :- std.exists L refinefull, !.

refinefull I :-
  coq.reduction.lazy.whd I Ir,
  refinefull_rec Ir.

% Remove all refinement types in the input term. `sig A P` is replaced by `A`, `proj1_sig x` is replaced by `x` and
% `exist p h` is replaced by p. Works up to delta reduction.
pred replace i:term, o:term.
replace ({{ exist _ lp:P _ }}) P' :- !, replace P P'.
replace ({{ @sig lp:A _ }}) A' :- !, replace A A'.
replace ({{ @proj1_sig _ _ lp:X }}) X' :- !, replace X X'.
replace (fun N T F) (fun N T1 F1) :- !,
    % We should add another variable and figure out which rule to add between the two introduced variables
  replace T T1, pi x\ decl x _ T => replace (F x) (F1 x).
replace X Y :- name X, !, X = Y, !. % avoid loading "replace x x" at binders
replace (global _ as C) C1 :-
  refinefull C, !,
  @redflags! coq.redflags.delta => coq.reduction.lazy.whd C C2,
  replace C2 C1.
replace (global _ as C) C.
replace (pglobal _ _ as C) C1 :-
  refinefull C, !,
  @redflags! coq.redflags.delta => coq.reduction.lazy.whd C C2,
  replace C2 C1.
replace (pglobal _ _ as C) C :- !.
replace (sort _ as C) C :- !.
replace (let N T B F) (let N T1 B1 F1) :- !,
  replace T T1, replace B B1, pi x\ decl x _ T => replace (F x) (F1 x).
replace (prod N T F) (prod N T1 F1) :- !,
  replace T T1, (pi x\ decl x _ T => replace (F x) (F1 x)).
replace (app L) (app L1) :- !, map L replace L1.
replace (fix N Rno Ty F) (fix N Rno Ty1 F1) :- !,
  replace Ty Ty1, pi x\ decl x _ Ty => replace (F x) (F1 x).
replace (match T Rty B) (match T1 Rty1 B1) :- !,
  replace T T1, replace Rty Rty1, map B replace B1.
replace (primitive _ as C) C :- !.
replace (uvar M L as X) W :- var X, !, map L replace L1, coq.mk-app-uvar M L1 W.
% when used in CHR rules
replace (uvar X L) (uvar X L1) :- map L replace L1.
